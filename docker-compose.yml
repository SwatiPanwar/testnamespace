version: "3.8"

networks:
    frontend:
        external: true
        name: frontend
    api:
      name: api

#Note the labels here are not part of the test. 
#You should not need to change them
x-service-traefik-frontend: &service-traefik-frontend
    labels:
        - "traefik.enable=true" 
        - "traefik.docker.network=frontend"
        - "traefik.http.routers.rtr_devopstestapi.rule=Host(`testapi.localhost`)"
        - "traefik.http.routers.rtr_devopstestapi.middlewares=auth"
        - "traefik.http.routers.rtr_devopstestapi.entrypoints=websecure"
        - "traefik.http.routers.rtr_devopstestapi.tls=true"

        - "traefik.http.routers.rtr_devopstestapi.service=svc_devopstestapi"
        - "traefik.http.services.svc_devopstestapi.loadbalancer.server.port=80"
        
              
services:
    api:
        image: swatipanwar/test_api_dev:latest
        networks:
            - api
        environment:
            ENVIRONMENT: prod
            APP_PORT: 80
            API_VERSION: ${API_VERSION:-0.1}
            #mountpoint always has a leading slash
            MOUNTPOINT: /testapi
            SUBMOUNT_URL:   #[dev, uat, ''] missing implies prod!
            SESSION_COOKIE_NAME: my_test_cookie

            WTF_CSRF_SECRET_KEY: abc
            SECRET_KEY: abc

        restart: unless-stopped

        #Labels
        <<: *service-traefik-frontend

        logging:
            driver: "json-file"
            options:
                max-file: "5"
                max-size: "10m"
 
        deploy:
            mode: replicated
            replicas: 1
            restart_policy:
                condition: any
                delay: 30s
                max_attempts: 0
            placement:
                constraints:
                    - node.role == worker
            update_config:
                delay: 2s
            #Labels for swarm mode deployments
            <<: *service-traefik-frontend


        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:80/testapi:dev/status"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 3s
        
              # command: [  "gunicorn", "--preload",
              #         "-w", "3",
              #         "--config", "/app/src/gunicorn_config.py",
              #         "--worker-tmp-dir", "/dev/shm", #use shm as the worker lock-file dir or we will have to wait for io
              #                        "--worker-class", "gevent",
              #         "-b", "0.0.0.0:80", #${INTERNAL_APP_PORT:?internal_app_port}
              #         "--logger-class", "logger.CustomLogger",
              #         "--access-logfile", "-",
              #         "--log-file", "-", #all logs to stdout
              #         "wsgigunicorn:app" ]

                        #        command: 
                        # - 'gunicorn'
                        # - '--preload'
                        # - '-w'
                        # - '3'
                        # - '--config','/testnamespace/src/gunicorn_config.py' 
                          # - '-config gunicorn_config.py'
                          # - 'gunicorn_config.py'
                          # - '--worker-tmp-dir' 
                          # - '/dev/shm'    #use shm as the worker lock-file dir or we will have to wait for io
                          ## - '--worker-class' 
                          # - 'gevent' 
                          # - '-b' 
                          #  - '0.0.0.0:80' 
                          # - '--logger-class' 
                          # - 'logger.CustomLogger'
                          # - '--access-logfile' 
                          # - '-'
                          # - '--log-file' 
                          # - '-' #all logs to stdout
                          # - 'wsgigunicorn:app'
                          

